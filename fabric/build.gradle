plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    interfaceInjection {
        interfaceInjectionSourceSets.add project(":common").sourceSets.main
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    implementation include("blue.endless:jankson:1.2.1")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modImplementation "com.terraformersmc:modmenu:4.1.0", {
        exclude module: "fabric-api"//intellisense doesn't work with groovy
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

task renameJarForPublication(type: Zip, dependsOn: remapJar) {
    from remapJar.archiveFile.map { zipTree(it) }
    extension "jar"
    metadataCharset "UTF-8"
    destinationDirectory = base.libsDirectory
    classifier project.name
}

assemble.dependsOn renameJarForPublication

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

unifiedPublishing {
    project {
        displayName = "[Fabric $rootProject.minecraft_version] v$project.version"
        releaseType = "Release" //"$rootProject.artifact_type"
        changelog = releaseChangelog()
        gameVersions = ["1.19.2"]
        gameLoaders = ["fabric", "quilt"]
        mainPublication renameJarForPublication
        relations {
            depends {
                curseforge = "fabric-api"
                modrinth = "fabric-api"
            }
        }

        var CURSE_API_KEY = project.findProperty("CURSE_API_KEY") ?: System.getenv("CURSE_API_KEY")
        if (CURSE_API_KEY != null) {
            curseforge {
                token = CURSE_API_KEY
                id = rootProject.curseforge_id
                gameVersions.addAll "Java 17"
            }


            var MODRINTH_TOKEN = project.findProperty("MODRINTH_TOKEN") ?: System.getenv("MODRINTH_TOKEN")
            if (MODRINTH_TOKEN != null) {
                modrinth {
                    token = MODRINTH_TOKEN
                    id = rootProject.modrinth_id
                    version = "$project.version+$project.name"
                }
            }
        }
    }
}